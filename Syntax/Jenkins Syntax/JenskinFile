pipeline {
    agent any  // Runs the pipeline on any available agent

    environment {
        // Define environment variables
        DOCKER_IMAGE = 'your-image:latest'
        REPO_URL = 'https://github.com/your-repo/your-project.git'
        SONARQUBE_URL = 'http://your-sonarqube-url'
        SONARQUBE_TOKEN = credentials('sonarqube-token') // Use Jenkins credentials for secure access
        AWS_CREDENTIALS_ID = 'aws-credentials-id' // Jenkins AWS credentials ID
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        // Pull the latest code from GitHub
                        git branch: 'main', url: "${REPO_URL}"
                        echo 'Checkout succeeded!'
                    } catch (Exception e) {
                        echo "Checkout failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping the pipeline due to checkout failure.")
                    }
                }
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    try {
                        // Verify installation of required tools
                        sh 'terraform --version'
                        sh 'ansible --version'
                        sh 'docker --version'
                        sh 'trivy --version'  // Ensure Trivy is installed
                        sh 'sonar-scanner --version'  // Ensure SonarQube Scanner is installed
                        echo 'Environment setup succeeded!'
                    } catch (Exception e) {
                        echo "Environment setup failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping the pipeline due to environment setup failure.")
                    }
                }
            }
        }

        stage('Terraform Init and Apply') {
            steps {
                script {
                    try {
                        // Initialize Terraform and apply configuration
                        withCredentials([aws(credentialsId: "${AWS_CREDENTIALS_ID}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                            sh 'terraform init'
                            sh 'terraform plan'
                            sh 'terraform apply -auto-approve'
                        }
                        echo 'Terraform succeeded!'
                    } catch (Exception e) {
                        echo "Terraform failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping the pipeline due to Terraform failure.")
                    }
                }
            }
        }

        stage('Code Analysis with SonarQube') {
            steps {
                script {
                    try {
                        // Run SonarQube analysis
                        sh """
                            sonar-scanner \
                            -Dsonar.projectKey=your-project-key \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=${SONARQUBE_URL} \
                            -Dsonar.login=${SONARQUBE_TOKEN}
                        """
                        echo 'SonarQube analysis succeeded!'
                    } catch (Exception e) {
                        echo "SonarQube analysis failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping the pipeline due to SonarQube analysis failure.")
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    try {
                        // Build Docker image for the application
                        sh 'docker build -t ${DOCKER_IMAGE} .'
                        echo 'Docker build succeeded!'
                    } catch (Exception e) {
                        echo "Docker build failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping the pipeline due to Docker build failure.")
                    }
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                script {
                    try {
                        // Scan Docker image for vulnerabilities
                        sh "trivy image ${DOCKER_IMAGE}"
                        echo 'Trivy scan succeeded!'
                    } catch (Exception e) {
                        echo "Trivy scan failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping the pipeline due to Trivy scan failure.")
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    try {
                        // Tag and push Docker image to a registry
                        sh 'docker tag ${DOCKER_IMAGE} your-repo/${DOCKER_IMAGE}'
                        sh 'docker push your-repo/${DOCKER_IMAGE}'
                        echo 'Docker push succeeded!'
                    } catch (Exception e) {
                        echo "Docker push failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping the pipeline due to Docker push failure.")
                    }
                }
            }
        }

        stage('Deploy to Test') {
            steps {
                script {
                    try {
                        // Deploy Docker image to the test environment
                        sh 'kubectl apply -f k8s/test-deployment.yml'
                        echo 'Deployment to test environment succeeded!'
                    } catch (Exception e) {
                        echo "Deployment to test environment failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping the pipeline due to test deployment failure.")
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    try {
                        // Run tests in the test environment
                        sh 'kubectl exec -it your-test-pod -- /bin/sh -c "run-tests.sh"'
                        echo 'Tests succeeded!'
                    } catch (Exception e) {
                        echo "Tests failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping the pipeline due to test failure.")
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    try {
                        // Deploy Docker image to the staging environment
                        sh 'kubectl apply -f k8s/staging-deployment.yml'
                        echo 'Deployment to staging environment succeeded!'
                    } catch (Exception e) {
                        echo "Deployment to staging environment failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping the pipeline due to staging deployment failure.")
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    try {
                        // Deploy Docker image to the production environment
                        sh 'kubectl apply -f k8s/production-deployment.yml'
                        echo 'Deployment to production environment succeeded!'
                    } catch (Exception e) {
                        echo "Deployment to production environment failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping the pipeline due to production deployment failure.")
                    }
                }
            }
        }

        stage('Configure Monitoring') {
            steps {
                script {
                    try {
                        // Configure Prometheus and Grafana using Ansible
                        sh 'ansible-playbook -i inventory/hosts configure-monitoring.yml'
                        echo 'Monitoring configuration succeeded!'
                    } catch (Exception e) {
                        echo "Monitoring configuration failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping the pipeline due to monitoring configuration failure.")
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    try {
                        // Clean up Docker images and other resources
                        sh 'docker system prune -f'
                        echo 'Cleanup succeeded!'
                    } catch (Exception e) {
                        echo "Cleanup failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Stopping the pipeline due to cleanup failure.")
                    }
                }
            }
        }
    }

    post {
        success {
            // Notify on successful pipeline completion
            slackSend(channel: '#your-channel', message: "Pipeline succeeded!")
        }
        failure {
            // Notify on pipeline failure
            slackSend(channel: '#your-channel', message: "Pipeline failed!")
        }
    }
}
